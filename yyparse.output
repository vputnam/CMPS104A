Terminals unused in grammar

   TOK_ROOT
   TOK_DECLID
   TOK_TYPEID
   TOK_INDEX
   TOK_NEWSTRING
   TOK_IFELSE
   TOK_RETURNVOID
   TOK_BLOCK
   TOK_VARDECL
   TOK_CALL
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_INITDECL
   TOK_FUNCTION
   TOK_FIELD
   TOK_NEWARRAY
   TOK_PAREN


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: structhead '}'

    9 structhead: structhead fielddecl ';'
   10           | TOK_STRUCT TOK_IDENT '{'

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT
   12          | basetype TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_BOOL
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_IDENT

   19 function: identdecl function_helper ')' block
   20         | identdecl function_helper ')' ';'

   21 function_helper: function_helper ',' identdecl
   22                | '(' identdecl
   23                | '('

   24 identdecl: basetype TOK_ARRAY TOK_IDENT
   25          | basetype TOK_IDENT

   26 blockhead: blockhead statement
   27          | '{' statement

   28 block: blockhead '}'
   29      | '{' '}'

   30 statement: block
   31          | vardecl
   32          | while
   33          | ifelse
   34          | return
   35          | expr ';'

   36 vardecl: identdecl '=' expr ';'

   37 while: TOK_WHILE '(' expr ')' statement

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   39       | TOK_IF '(' expr ')' statement

   40 return: TOK_RETURN expr ';'
   41       | TOK_RETURN ';'

   42 exprs: exprs ',' expr
   43      | expr

   44 expr: binop
   45     | unop
   46     | allocator
   47     | call
   48     | '(' expr ')'
   49     | variable
   50     | constant

   51 binop: expr '=' expr
   52      | expr TOK_EQ expr
   53      | expr TOK_NE expr
   54      | expr TOK_LT expr
   55      | expr TOK_LE expr
   56      | expr TOK_GT expr
   57      | expr TOK_GE expr
   58      | expr '+' expr
   59      | expr '-' expr
   60      | expr '*' expr
   61      | expr '/' expr
   62      | expr '%' expr

   63 unop: '+' expr
   64     | '-' expr
   65     | '!' expr
   66     | TOK_ORD expr
   67     | TOK_CHR expr

   68 allocator: TOK_NEW TOK_IDENT '(' ')'
   69          | TOK_NEW TOK_STRING '(' expr ')'
   70          | TOK_NEW basetype '[' expr ']'

   71 call: TOK_IDENT '(' exprs ')'
   72     | TOK_IDENT '(' ')'

   73 variable: TOK_IDENT
   74         | expr '[' expr ']'
   75         | expr '.' TOK_IDENT

   76 constant: TOK_INTCON
   77         | TOK_CHARCON
   78         | TOK_STRINGCON
   79         | TOK_FALSE
   80         | TOK_TRUE
   81         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 65
'%' (37) 62
'(' (40) 22 23 37 38 39 48 68 69 71 72
')' (41) 19 20 37 38 39 48 68 69 71 72
'*' (42) 60
'+' (43) 58 63
',' (44) 21 42
'-' (45) 59 64
'.' (46) 75
'/' (47) 61
';' (59) 6 9 20 35 36 40 41
'=' (61) 36 51
'[' (91) 70 74
']' (93) 70 74
'{' (123) 10 27 29
'}' (125) 5 8 28 29
error (256) 5 6
TOK_ROOT (258)
TOK_DECLID (259)
TOK_TYPEID (260)
TOK_INDEX (261)
TOK_NEWSTRING (262)
TOK_IFELSE (263)
TOK_RETURNVOID (264)
TOK_BLOCK (265)
TOK_VARDECL (266)
TOK_CALL (267)
TOK_PARAMLIST (268)
TOK_PROTOTYPE (269)
TOK_VOID (270) 13
TOK_BOOL (271) 14
TOK_CHAR (272) 15
TOK_INT (273) 16
TOK_STRING (274) 17 69
TOK_WHILE (275) 37
TOK_RETURN (276) 40 41
TOK_STRUCT (277) 10
TOK_FALSE (278) 79
TOK_TRUE (279) 80
TOK_NULL (280) 81
TOK_ARRAY (281) 11 24
TOK_EQ (282) 52
TOK_NE (283) 53
TOK_LT (284) 54
TOK_LE (285) 55
TOK_GT (286) 56
TOK_GE (287) 57
TOK_IDENT (288) 10 11 12 18 24 25 68 71 72 73 75
TOK_INTCON (289) 76
TOK_CHARCON (290) 77
TOK_STRINGCON (291) 78
TOK_INITDECL (292)
TOK_ELSE (293) 38
TOK_IF (294) 38 39
TOK_CHR (295) 67
TOK_ORD (296) 66
TOK_NEG (297)
TOK_POS (298)
TOK_FUNCTION (299)
TOK_FIELD (300)
TOK_NEWARRAY (301)
TOK_NEW (302) 68 69 70
TOK_PAREN (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
start (66)
    on left: 1, on right: 0
program (67)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (68)
    on left: 8, on right: 2
structhead (69)
    on left: 9 10, on right: 8 9
fielddecl (70)
    on left: 11 12, on right: 9
basetype (71)
    on left: 13 14 15 16 17 18, on right: 11 12 24 25 70
function (72)
    on left: 19 20, on right: 3
function_helper (73)
    on left: 21 22 23, on right: 19 20 21
identdecl (74)
    on left: 24 25, on right: 19 20 21 22 36
blockhead (75)
    on left: 26 27, on right: 26 28
block (76)
    on left: 28 29, on right: 19 30
statement (77)
    on left: 30 31 32 33 34 35, on right: 4 26 27 37 38 39
vardecl (78)
    on left: 36, on right: 31
while (79)
    on left: 37, on right: 32
ifelse (80)
    on left: 38 39, on right: 33
return (81)
    on left: 40 41, on right: 34
exprs (82)
    on left: 42 43, on right: 42 71
expr (83)
    on left: 44 45 46 47 48 49 50, on right: 35 36 37 38 39 40 42 43
    48 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 69 70 74
    75
binop (84)
    on left: 51 52 53 54 55 56 57 58 59 60 61 62, on right: 44
unop (85)
    on left: 63 64 65 66 67, on right: 45
allocator (86)
    on left: 68 69 70, on right: 46
call (87)
    on left: 71 72, on right: 47
variable (88)
    on left: 73 74 75, on right: 49
constant (89)
    on left: 76 77 78 79 80 81, on right: 50


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_IF         shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '{'            shift, and go to state 27
    '('            shift, and go to state 28

    $end  reduce using rule 1 (start)

    structdef   go to state 29
    structhead  go to state 30
    basetype    go to state 31
    function    go to state 32
    identdecl   go to state 33
    blockhead   go to state 34
    block       go to state 35
    statement   go to state 36
    vardecl     go to state 37
    while       go to state 38
    ifelse      go to state 39
    return      go to state 40
    expr        go to state 41
    binop       go to state 42
    unop        go to state 43
    allocator   go to state 44
    call        go to state 45
    variable    go to state 46
    constant    go to state 47


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49


State 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


State 6

   14 basetype: TOK_BOOL .

    $default  reduce using rule 14 (basetype)


State 7

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


State 8

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


State 9

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


State 10

   37 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 50


State 11

   40 return: TOK_RETURN . expr ';'
   41       | TOK_RETURN . ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    ';'            shift, and go to state 52
    '('            shift, and go to state 28

    expr       go to state 53
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 12

   10 structhead: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 54


State 13

   79 constant: TOK_FALSE .

    $default  reduce using rule 79 (constant)


State 14

   80 constant: TOK_TRUE .

    $default  reduce using rule 80 (constant)


State 15

   81 constant: TOK_NULL .

    $default  reduce using rule 81 (constant)


State 16

   18 basetype: TOK_IDENT .
   71 call: TOK_IDENT . '(' exprs ')'
   72     | TOK_IDENT . '(' ')'
   73 variable: TOK_IDENT .

    '('  shift, and go to state 55

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 73 (variable)


State 17

   76 constant: TOK_INTCON .

    $default  reduce using rule 76 (constant)


State 18

   77 constant: TOK_CHARCON .

    $default  reduce using rule 77 (constant)


State 19

   78 constant: TOK_STRINGCON .

    $default  reduce using rule 78 (constant)


State 20

   38 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   39       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 56


State 21

   63 unop: '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 57
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 22

   64 unop: '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 58
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 23

   65 unop: '!' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 59
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 24

   67 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 60
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 25

   66 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 61
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 26

   68 allocator: TOK_NEW . TOK_IDENT '(' ')'
   69          | TOK_NEW . TOK_STRING '(' expr ')'
   70          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 62
    TOK_IDENT   shift, and go to state 63

    basetype  go to state 64


State 27

   27 blockhead: '{' . statement
   29 block: '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_IF         shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '}'            shift, and go to state 65
    '{'            shift, and go to state 27
    '('            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 67
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 28

   48 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 68
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 29

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 30

    8 structdef: structhead . '}'
    9 structhead: structhead . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 69
    '}'         shift, and go to state 70

    fielddecl  go to state 71
    basetype   go to state 72


State 31

   24 identdecl: basetype . TOK_ARRAY TOK_IDENT
   25          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 73
    TOK_IDENT  shift, and go to state 74


State 32

    3 program: program function .

    $default  reduce using rule 3 (program)


State 33

   19 function: identdecl . function_helper ')' block
   20         | identdecl . function_helper ')' ';'
   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 75
    '('  shift, and go to state 76

    function_helper  go to state 77


State 34

   26 blockhead: blockhead . statement
   28 block: blockhead . '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_IF         shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '}'            shift, and go to state 78
    '{'            shift, and go to state 27
    '('            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 79
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 35

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 37

   31 statement: vardecl .

    $default  reduce using rule 31 (statement)


State 38

   32 statement: while .

    $default  reduce using rule 32 (statement)


State 39

   33 statement: ifelse .

    $default  reduce using rule 33 (statement)


State 40

   34 statement: return .

    $default  reduce using rule 34 (statement)


State 41

   35 statement: expr . ';'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ';'     shift, and go to state 94


State 42

   44 expr: binop .

    $default  reduce using rule 44 (expr)


State 43

   45 expr: unop .

    $default  reduce using rule 45 (expr)


State 44

   46 expr: allocator .

    $default  reduce using rule 46 (expr)


State 45

   47 expr: call .

    $default  reduce using rule 47 (expr)


State 46

   49 expr: variable .

    $default  reduce using rule 49 (expr)


State 47

   50 expr: constant .

    $default  reduce using rule 50 (expr)


State 48

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 49

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 50

   37 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 95
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 51

   71 call: TOK_IDENT . '(' exprs ')'
   72     | TOK_IDENT . '(' ')'
   73 variable: TOK_IDENT .

    '('  shift, and go to state 55

    $default  reduce using rule 73 (variable)


State 52

   41 return: TOK_RETURN ';' .

    $default  reduce using rule 41 (return)


State 53

   40 return: TOK_RETURN expr . ';'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ';'     shift, and go to state 96


State 54

   10 structhead: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 97


State 55

   71 call: TOK_IDENT '(' . exprs ')'
   72     | TOK_IDENT '(' . ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    ')'            shift, and go to state 98
    '('            shift, and go to state 28

    exprs      go to state 99
    expr       go to state 100
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 56

   38 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   39       | TOK_IF '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 101
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 57

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   63 unop: '+' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 63 (unop)


State 58

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   64 unop: '-' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 64 (unop)


State 59

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   65 unop: '!' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 65 (unop)


State 60

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   67 unop: TOK_CHR expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 67 (unop)


State 61

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   66 unop: TOK_ORD expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 66 (unop)


State 62

   17 basetype: TOK_STRING .
   69 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 102

    $default  reduce using rule 17 (basetype)


State 63

   18 basetype: TOK_IDENT .
   68 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 103

    $default  reduce using rule 18 (basetype)


State 64

   70 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 104


State 65

   29 block: '{' '}' .

    $default  reduce using rule 29 (block)


State 66

   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 75


State 67

   27 blockhead: '{' statement .

    $default  reduce using rule 27 (blockhead)


State 68

   48 expr: '(' expr . ')'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 105


State 69

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 70

    8 structdef: structhead '}' .

    $default  reduce using rule 8 (structdef)


State 71

    9 structhead: structhead fielddecl . ';'

    ';'  shift, and go to state 106


State 72

   11 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   12          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 107
    TOK_IDENT  shift, and go to state 108


State 73

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 109


State 74

   25 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 75

   36 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 110
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 76

   22 function_helper: '(' . identdecl
   23                | '(' .

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 69

    $default  reduce using rule 23 (function_helper)

    basetype   go to state 31
    identdecl  go to state 111


State 77

   19 function: identdecl function_helper . ')' block
   20         | identdecl function_helper . ')' ';'
   21 function_helper: function_helper . ',' identdecl

    ')'  shift, and go to state 112
    ','  shift, and go to state 113


State 78

   28 block: blockhead '}' .

    $default  reduce using rule 28 (block)


State 79

   26 blockhead: blockhead statement .

    $default  reduce using rule 26 (blockhead)


State 80

   52 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 114
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 81

   53 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 115
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 82

   54 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 116
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 83

   55 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 117
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 84

   56 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 118
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 85

   57 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 119
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 86

   51 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 120
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 87

   58 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 121
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 88

   59 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 122
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 89

   60 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 123
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 90

   61 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 124
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 91

   62 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 125
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 92

   74 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 126
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 93

   75 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 127


State 94

   35 statement: expr ';' .

    $default  reduce using rule 35 (statement)


State 95

   37 while: TOK_WHILE '(' expr . ')' statement
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 128


State 96

   40 return: TOK_RETURN expr ';' .

    $default  reduce using rule 40 (return)


State 97

   10 structhead: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 10 (structhead)


State 98

   72 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 72 (call)


State 99

   42 exprs: exprs . ',' expr
   71 call: TOK_IDENT '(' exprs . ')'

    ')'  shift, and go to state 129
    ','  shift, and go to state 130


State 100

   43 exprs: expr .
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93

    $default  reduce using rule 43 (exprs)


State 101

   38 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   39       | TOK_IF '(' expr . ')' statement
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 131


State 102

   69 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 132
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 103

   68 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 133


State 104

   70 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 134
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 105

   48 expr: '(' expr ')' .

    $default  reduce using rule 48 (expr)


State 106

    9 structhead: structhead fielddecl ';' .

    $default  reduce using rule 9 (structhead)


State 107

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 135


State 108

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 109

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


State 110

   36 vardecl: identdecl '=' expr . ';'
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ';'     shift, and go to state 136


State 111

   22 function_helper: '(' identdecl .

    $default  reduce using rule 22 (function_helper)


State 112

   19 function: identdecl function_helper ')' . block
   20         | identdecl function_helper ')' . ';'

    ';'  shift, and go to state 137
    '{'  shift, and go to state 27

    blockhead  go to state 34
    block      go to state 138


State 113

   21 function_helper: function_helper ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 69

    basetype   go to state 31
    identdecl  go to state 139


State 114

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   52      | expr TOK_EQ expr .
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 52 (binop)


State 115

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   53      | expr TOK_NE expr .
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 53 (binop)


State 116

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   54      | expr TOK_LT expr .
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 54 (binop)


State 117

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   55      | expr TOK_LE expr .
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 55 (binop)


State 118

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   56      | expr TOK_GT expr .
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 56 (binop)


State 119

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   57      | expr TOK_GE expr .
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88
    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 57 (binop)


State 120

   51 binop: expr . '=' expr
   51      | expr '=' expr .
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93

    $default  reduce using rule 51 (binop)


State 121

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   58      | expr '+' expr .
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 58 (binop)


State 122

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   59      | expr '-' expr .
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 89
    '/'  shift, and go to state 90
    '%'  shift, and go to state 91
    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 59 (binop)


State 123

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   60      | expr '*' expr .
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 60 (binop)


State 124

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   61      | expr '/' expr .
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 61 (binop)


State 125

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   62      | expr '%' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 92
    '.'  shift, and go to state 93

    $default  reduce using rule 62 (binop)


State 126

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   74         | expr '[' expr . ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ']'     shift, and go to state 140


State 127

   75 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 75 (variable)


State 128

   37 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_IF         shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '{'            shift, and go to state 27
    '('            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 141
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 129

   71 call: TOK_IDENT '(' exprs ')' .

    $default  reduce using rule 71 (call)


State 130

   42 exprs: exprs ',' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '('            shift, and go to state 28

    expr       go to state 142
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 131

   38 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   39       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_IF         shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '{'            shift, and go to state 27
    '('            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 143
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 132

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   69 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ')'     shift, and go to state 144


State 133

   68 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 68 (allocator)


State 134

   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   70 allocator: TOK_NEW basetype '[' expr . ']'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93
    ']'     shift, and go to state 145


State 135

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


State 136

   36 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 36 (vardecl)


State 137

   20 function: identdecl function_helper ')' ';' .

    $default  reduce using rule 20 (function)


State 138

   19 function: identdecl function_helper ')' block .

    $default  reduce using rule 19 (function)


State 139

   21 function_helper: function_helper ',' identdecl .

    $default  reduce using rule 21 (function_helper)


State 140

   74 variable: expr '[' expr ']' .

    $default  reduce using rule 74 (variable)


State 141

   37 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 37 (while)


State 142

   42 exprs: exprs ',' expr .
   51 binop: expr . '=' expr
   52      | expr . TOK_EQ expr
   53      | expr . TOK_NE expr
   54      | expr . TOK_LT expr
   55      | expr . TOK_LE expr
   56      | expr . TOK_GT expr
   57      | expr . TOK_GE expr
   58      | expr . '+' expr
   59      | expr . '-' expr
   60      | expr . '*' expr
   61      | expr . '/' expr
   62      | expr . '%' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 80
    TOK_NE  shift, and go to state 81
    TOK_LT  shift, and go to state 82
    TOK_LE  shift, and go to state 83
    TOK_GT  shift, and go to state 84
    TOK_GE  shift, and go to state 85
    '='     shift, and go to state 86
    '+'     shift, and go to state 87
    '-'     shift, and go to state 88
    '*'     shift, and go to state 89
    '/'     shift, and go to state 90
    '%'     shift, and go to state 91
    '['     shift, and go to state 92
    '.'     shift, and go to state 93

    $default  reduce using rule 42 (exprs)


State 143

   38 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   39       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 146

    $default  reduce using rule 39 (ifelse)


State 144

   69 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 69 (allocator)


State 145

   70 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 70 (allocator)


State 146

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    TOK_IF         shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    TOK_CHR        shift, and go to state 24
    TOK_ORD        shift, and go to state 25
    TOK_NEW        shift, and go to state 26
    '{'            shift, and go to state 27
    '('            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    blockhead  go to state 34
    block      go to state 35
    statement  go to state 147
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 147

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)
